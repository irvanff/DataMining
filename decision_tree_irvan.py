# -*- coding: utf-8 -*-
"""Decision_Tree_irvan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NHba-QTIpv4eW0bOHyi9z8RIp9BP79rz
"""

#Import library numpy, pandas dan sclikit-learn
import numpy as np
import pandas as pd
from sklearn import tree

#Membaca dataset dari file ke pandas dataFrame
irisDataset = pd.read_csv('klasifikasi_dataset_iris_oke.csv', delimiter=',', header=0)

irisDataset.head()

#mengubah kelas (kolom "species") dari string ke unique-integer
irisDataset["Species"] = pd.factorize(irisDataset.Species)[0]

irisDataset.head()

print(irisDataset)

#menghapus kolom "id"
irisDataset = irisDataset.drop(labels="id", axis=1)

print(irisDataset)

#mengubah dataframe ke array numpy
irisDataset = irisDataset.to_numpy()

print(irisDataset)

#membagi dataset => 80 baris data untuk training dan 20 baris data untuk testing
dataTraining = np.concatenate((irisDataset[0:40, :], irisDataset[50:90, :]), axis=0)
dataTesting = np.concatenate((irisDataset[40:50, :], irisDataset[90:100, :]), axis=0)

print(dataTraining)
len(dataTraining)

print(dataTesting)
len(dataTesting)

#memecah dataset ke input label
inputTraining = dataTraining[:, 0:4]
inputTesting = dataTesting[:, 0:4]
labelTraining = dataTraining[:, 4]
labelTesting = dataTesting[:, 4]
print(labelTraining)
len(labelTraining)

#mendefinisikan decision tree classifier
model = tree.DecisionTreeClassifier()

#mentraining model
model = model.fit(inputTraining, labelTraining)

#memprediksi input data testing
hasilPrediksi = model.predict(inputTesting)
print("Label Sebenarnya : ", labelTesting)
print("Hasil Prediksi : ", hasilPrediksi)

#menghitung akurasi
prediksiBenar = (hasilPrediksi == labelTesting).sum()
prediksiSalah = (hasilPrediksi != labelTesting).sum()
print("Prediksi Benar :", prediksiBenar, "data")
print("Prediksi Salah :", prediksiSalah, "data")
print("Akurasi :", prediksiBenar/(prediksiBenar+prediksiSalah) * 100, "%")